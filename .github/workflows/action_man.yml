name: aux-flow

on:
  workflow_dispatch:
  push:
    branches:    
      - main

jobs:
  run_pipeline:
    runs-on: ubuntu-latest
    outputs:
      need_push: ${{steps.update_stacks.need_push}}

    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v3
      
      - name: Check stack name
        id: update_stacks
        run: |
          ACTION_FILE=.github/workflows/otro_action.yml
          STACKS_DIR=services

          ## Get a list of stacks listed in the yaml and a list of stacks in the source code
          FILE_STACKS=$(sed -n '/options/,/jobs/p' $ACTION_FILE | grep '-' | tr -dc '[:alnum:]\n\r\t' | sort | uniq)
          SRC_STACKS=$(ls ${STACKS_DIR}/**/stack_manifest.json | rev | cut -d'/' -f 2 | rev | sort | uniq)
          NEW_STACKS=$(comm -3 <(echo $FILE_STACKS) <(echo $SRC_STACKS))

          ## Compare stacks to detect changes
          unset UPDATE
          UPDATE=$(comm -3 <(echo $FILE_STACKS) <(echo $SRC_STACKS) | wc -l)

          unset OUTPUT
          if [[ $UPDATE -ge 1 ]]
          then
            echo "New stack found, updating yaml"
            for STACK in $SRC_STACKS
            do
              OUTPUT+="\n        - $STACK"
            done

            ## Delete old options
            for line in $FILE_STACKS
            do 
              echo "- ${line}" >> /tmp/temp_stack_list.txt
            done
            grep -v -f /tmp/temp_stack_list.txt $ACTION_FILE > /tmp/temp.yml

            ## Insert new options and replace file
            sed "s/options:/options: ${OUTPUT}/" /tmp/temp.yml > $ACTION_FILE

            echo "_----Result----_"
            cat $ACTION_FILE
            
            ## Update variable to tell the next step to commit and push
            echo "need_push=1" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "need_push=0" >> $GITHUB_OUTPUT
          fi

  commit_and_push:
    runs-on: ubuntu-latest
    needs: run_pipeline
    steps:
      - name: sports
        env:
          OUTPUT1: ${{ needs.run_pipeline.outputs.need_push }}
        run: echo "$OUTPUT1"

    #- name: Run the Action
    #  uses: devops-infra/action-commit-push@master
    #  if: ${{  }}
    #  with:
    #    github_token: "${{ secrets.GITHUB_TOKEN }}"
    #    add_timestamp: true
    #    commit_prefix: "[AUTO]"
    #    commit_message: "Automatic commit"
    #    force: false
    #    target_branch: update/version

